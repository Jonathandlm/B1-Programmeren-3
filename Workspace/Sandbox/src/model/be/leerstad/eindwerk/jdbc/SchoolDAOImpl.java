// Generated by DB Solo 5.2.1 on Feb 14, 2017 at 9:31:39 PM
package be.leerstad.eindwerk.jdbc;

import be.leerstad.eindwerk.School;
import be.leerstad.eindwerk.dao.DAOException;
import be.leerstad.eindwerk.dao.SchoolDAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class SchoolDAOImpl implements SchoolDAO {
    //
    // static data
    //
    protected static List pkColumns = new ArrayList();
    protected static List stdColumns = new ArrayList();
    protected static List allColumns = new ArrayList();
    protected static String tableName = "schools";

    static {
        pkColumns.add("IPAddress");
        stdColumns.add("Site");
        stdColumns.add("Street");
        stdColumns.add("Zip");
        stdColumns.add("City");
        allColumns.addAll(pkColumns);
        allColumns.addAll(stdColumns);
    }

    //
    // data
    //
    protected Connection conn = null;

    //
    // construction
    //
    public SchoolDAOImpl() {
        this(null);
    }

    public SchoolDAOImpl(Connection conn) {
        this.conn = conn;
    }

    //
    // CRUD methods
    //
    public School getByPrimaryKey(String ipaddress) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            int pos = 1;
            ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, pkColumns));
            DBUtil.bind(ps, pos++, ipaddress);
            rs = ps.executeQuery();

            if (rs.next()) {
                return fromResultSet(rs);
            }
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return null;
    }

    public long selectCount() throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = getConn().prepareStatement("select count(*) from " + tableName);
            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getLong(1);
            }
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return 0;
    }

    public long selectCount(String whereStatement, Object[] bindVariables)
        throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        if (!whereStatement.trim().toUpperCase().startsWith("WHERE")) {
            whereStatement = " WHERE " + whereStatement;
        }
        else if (whereStatement.startsWith(" ") == false) {
            whereStatement = " " + whereStatement;
        }

        try {
            ps = getConn().prepareStatement("select count(*) from " + tableName + whereStatement);

            for (int i = 0; i < bindVariables.length; i++)
                DBUtil.bind(ps, i + 1, bindVariables[i]);

            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getLong(1);
            }
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return 0;
    }

    public List selectAll() throws DAOException {
        List ret = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns));
            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List select(String whereStatement, Object[] bindVariables)
        throws DAOException {
        List ret = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;

        if (!whereStatement.trim().toUpperCase().startsWith("WHERE")) {
            whereStatement = " WHERE " + whereStatement;
        }
        else if (whereStatement.startsWith(" ") == false) {
            whereStatement = " " + whereStatement;
        }

        try {
            ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns) + whereStatement);

            for (int i = 0; i < bindVariables.length; i++)
                DBUtil.bind(ps, i + 1, bindVariables[i]);

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException("Error in select(), table = " + tableName, e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public int update(School obj) throws DAOException {
        PreparedStatement ps = null;
        int pos = 1;

        try {
            ps = getConn().prepareStatement(DBUtil.update(tableName, stdColumns, pkColumns));
            pos = bindStdColumns(ps, obj, pos);
            bindPrimaryKey(ps, obj, pos);

            int rowCount = ps.executeUpdate();

            if (rowCount != 1) {
                throw new DAOException("Error updating " + obj.getClass() + " in " + tableName +
                    ", affected rows = " + rowCount);
            }

            return rowCount;
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, null);
        }
    }

    public int insert(School obj) throws DAOException {
        PreparedStatement ps = null;
        int pos = 1;

        try {
            ps = getConn().prepareStatement(DBUtil.insert(tableName, pkColumns, stdColumns));
            pos = bindPrimaryKey(ps, obj, pos);
            bindStdColumns(ps, obj, pos);

            int rowCount = ps.executeUpdate();

            if (rowCount != 1) {
                throw new DAOException("Error inserting " + obj.getClass() + " in " + tableName +
                    ", affected rows = " + rowCount);
            }

            return rowCount;
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, null);
        }
    }

    public int delete(School obj) throws DAOException {
        PreparedStatement ps = null;

        try {
            ps = getConn().prepareStatement(DBUtil.delete(tableName, pkColumns));
            bindPrimaryKey(ps, obj, 1);

            int rowCount = ps.executeUpdate();

            if (rowCount != 1) {
                throw new DAOException("Error deleting " + obj.getClass() + " in " + tableName +
                    ", affected rows = " + rowCount);
            }

            return rowCount;
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, null);
        }
    }

    //
    // finders
    //
    public List getBySite(String site) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == site) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "Site" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "Site" })));
                DBUtil.bind(ps, 1, site);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByStreet(String street) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == street) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "Street" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "Street" })));
                DBUtil.bind(ps, 1, street);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByZip(String zip) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == zip) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "Zip" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "Zip" })));
                DBUtil.bind(ps, 1, zip);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByCity(String city) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == city) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "City" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "City" })));
                DBUtil.bind(ps, 1, city);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    //
    // helpers
    //
    protected int bindPrimaryKey(PreparedStatement ps, School obj, int pos)
        throws SQLException {
        DBUtil.bind(ps, pos++, obj.getIpaddress());

        return pos;
    }

    protected int bindStdColumns(PreparedStatement ps, School obj, int pos)
        throws SQLException {
        DBUtil.bind(ps, pos++, obj.getSite());
        DBUtil.bind(ps, pos++, obj.getStreet());
        DBUtil.bind(ps, pos++, obj.getZip());
        DBUtil.bind(ps, pos++, obj.getCity());

        return pos;
    }

    protected School fromResultSet(ResultSet rs) throws SQLException {
        School obj = new School();

        obj.setIpaddress(DBUtil.getString(rs, "IPAddress"));
        obj.setSite(DBUtil.getString(rs, "Site"));
        obj.setStreet(DBUtil.getString(rs, "Street"));
        obj.setZip(DBUtil.getString(rs, "Zip"));
        obj.setCity(DBUtil.getString(rs, "City"));

        return obj;
    }

    protected Connection getConn() {
        return (conn == null) ? DBUtil.getConnection() : conn;
    }
}
