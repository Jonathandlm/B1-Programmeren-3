// Generated by DB Solo 5.2.1 on Feb 14, 2017 at 9:31:39 PM
package be.leerstad.eindwerk.jdbc;

import be.leerstad.eindwerk.Visit;
import be.leerstad.eindwerk.dao.DAOException;
import be.leerstad.eindwerk.dao.VisitDAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;


public class VisitDAOImpl implements VisitDAO {
    //
    // static data
    //
    protected static List pkColumns = new ArrayList();
    protected static List stdColumns = new ArrayList();
    protected static List allColumns = new ArrayList();
    protected static String tableName = "visits";

    static {
        pkColumns.add("VisitID");
        stdColumns.add("Logfile");
        stdColumns.add("IPAddress");
        stdColumns.add("VisitTime");
        stdColumns.add("TotalTime");
        stdColumns.add("TransferredBytes");
        stdColumns.add("NumberOfRequests");
        stdColumns.add("User");
        stdColumns.add("SiteApplicationID");
        stdColumns.add("IPSchool");
        allColumns.addAll(pkColumns);
        allColumns.addAll(stdColumns);
    }

    //
    // data
    //
    protected Connection conn = null;

    //
    // construction
    //
    public VisitDAOImpl() {
        this(null);
    }

    public VisitDAOImpl(Connection conn) {
        this.conn = conn;
    }

    //
    // CRUD methods
    //
    public Visit getByPrimaryKey(String visitid) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            int pos = 1;
            ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns, pkColumns));
            DBUtil.bind(ps, pos++, visitid);
            rs = ps.executeQuery();

            if (rs.next()) {
                return fromResultSet(rs);
            }
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return null;
    }

    public long selectCount() throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = getConn().prepareStatement("select count(*) from " + tableName);
            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getLong(1);
            }
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return 0;
    }

    public long selectCount(String whereStatement, Object[] bindVariables)
        throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;

        if (!whereStatement.trim().toUpperCase().startsWith("WHERE")) {
            whereStatement = " WHERE " + whereStatement;
        }
        else if (whereStatement.startsWith(" ") == false) {
            whereStatement = " " + whereStatement;
        }

        try {
            ps = getConn().prepareStatement("select count(*) from " + tableName + whereStatement);

            for (int i = 0; i < bindVariables.length; i++)
                DBUtil.bind(ps, i + 1, bindVariables[i]);

            rs = ps.executeQuery();

            if (rs.next()) {
                return rs.getLong(1);
            }
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return 0;
    }

    public List selectAll() throws DAOException {
        List ret = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns));
            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List select(String whereStatement, Object[] bindVariables)
        throws DAOException {
        List ret = new ArrayList();
        PreparedStatement ps = null;
        ResultSet rs = null;

        if (!whereStatement.trim().toUpperCase().startsWith("WHERE")) {
            whereStatement = " WHERE " + whereStatement;
        }
        else if (whereStatement.startsWith(" ") == false) {
            whereStatement = " " + whereStatement;
        }

        try {
            ps = getConn().prepareStatement(DBUtil.select(tableName, allColumns) + whereStatement);

            for (int i = 0; i < bindVariables.length; i++)
                DBUtil.bind(ps, i + 1, bindVariables[i]);

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException("Error in select(), table = " + tableName, e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public int update(Visit obj) throws DAOException {
        PreparedStatement ps = null;
        int pos = 1;

        try {
            ps = getConn().prepareStatement(DBUtil.update(tableName, stdColumns, pkColumns));
            pos = bindStdColumns(ps, obj, pos);
            bindPrimaryKey(ps, obj, pos);

            int rowCount = ps.executeUpdate();

            if (rowCount != 1) {
                throw new DAOException("Error updating " + obj.getClass() + " in " + tableName +
                    ", affected rows = " + rowCount);
            }

            return rowCount;
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, null);
        }
    }

    public int insert(Visit obj) throws DAOException {
        PreparedStatement ps = null;
        int pos = 1;

        try {
            ps = getConn().prepareStatement(DBUtil.insert(tableName, pkColumns, stdColumns));
            pos = bindPrimaryKey(ps, obj, pos);
            bindStdColumns(ps, obj, pos);

            int rowCount = ps.executeUpdate();

            if (rowCount != 1) {
                throw new DAOException("Error inserting " + obj.getClass() + " in " + tableName +
                    ", affected rows = " + rowCount);
            }

            return rowCount;
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, null);
        }
    }

    public int delete(Visit obj) throws DAOException {
        PreparedStatement ps = null;

        try {
            ps = getConn().prepareStatement(DBUtil.delete(tableName, pkColumns));
            bindPrimaryKey(ps, obj, 1);

            int rowCount = ps.executeUpdate();

            if (rowCount != 1) {
                throw new DAOException("Error deleting " + obj.getClass() + " in " + tableName +
                    ", affected rows = " + rowCount);
            }

            return rowCount;
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, null);
        }
    }

    //
    // finders
    //
    public List getByLogfile(String logfile) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == logfile) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "Logfile" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "Logfile" })));
                DBUtil.bind(ps, 1, logfile);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByIpaddress(String ipaddress) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == ipaddress) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "IPAddress" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "IPAddress" })));
                DBUtil.bind(ps, 1, ipaddress);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByVisittime(Date visittime) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == visittime) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "VisitTime" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "VisitTime" })));
                DBUtil.bind(ps, 1, visittime);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByTotaltime(Integer totaltime) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == totaltime) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "TotalTime" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "TotalTime" })));
                DBUtil.bind(ps, 1, totaltime);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByTransferredbytes(Integer transferredbytes)
        throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == transferredbytes) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "TransferredBytes" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "TransferredBytes" })));
                DBUtil.bind(ps, 1, transferredbytes);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByNumberofrequests(Integer numberofrequests)
        throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == numberofrequests) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "NumberOfRequests" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "NumberOfRequests" })));
                DBUtil.bind(ps, 1, numberofrequests);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByUser(String user) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == user) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "User" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "User" })));
                DBUtil.bind(ps, 1, user);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getBySiteapplicationid(Integer siteapplicationid)
        throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == siteapplicationid) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "SiteApplicationID" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "SiteApplicationID" })));
                DBUtil.bind(ps, 1, siteapplicationid);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    public List getByIpschool(String ipschool) throws DAOException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        List ret = new ArrayList();

        try {
            if (null == ipschool) {
                ps = getConn()
                         .prepareStatement(DBUtil.selectNull(tableName, allColumns,
                            Arrays.asList(new String[]{ "IPSchool" })));
            }
            else {
                ps = getConn()
                         .prepareStatement(DBUtil.select(tableName, allColumns,
                            Arrays.asList(new String[]{ "IPSchool" })));
                DBUtil.bind(ps, 1, ipschool);
            }

            rs = ps.executeQuery();

            while (rs.next())
                ret.add(fromResultSet(rs));
        }
        catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DBUtil.close(ps, rs);
        }

        return ret;
    }

    //
    // helpers
    //
    protected int bindPrimaryKey(PreparedStatement ps, Visit obj, int pos)
        throws SQLException {
        DBUtil.bind(ps, pos++, obj.getVisitid());

        return pos;
    }

    protected int bindStdColumns(PreparedStatement ps, Visit obj, int pos)
        throws SQLException {
        DBUtil.bind(ps, pos++, obj.getLogfile());
        DBUtil.bind(ps, pos++, obj.getIpaddress());
        DBUtil.bind(ps, pos++, obj.getVisittime());
        DBUtil.bind(ps, pos++, obj.getTotaltime());
        DBUtil.bind(ps, pos++, obj.getTransferredbytes());
        DBUtil.bind(ps, pos++, obj.getNumberofrequests());
        DBUtil.bind(ps, pos++, obj.getUser());
        DBUtil.bind(ps, pos++, obj.getSiteapplicationid());
        DBUtil.bind(ps, pos++, obj.getIpschool());

        return pos;
    }

    protected Visit fromResultSet(ResultSet rs) throws SQLException {
        Visit obj = new Visit();

        obj.setVisitid(DBUtil.getString(rs, "VisitID"));
        obj.setLogfile(DBUtil.getString(rs, "Logfile"));
        obj.setIpaddress(DBUtil.getString(rs, "IPAddress"));
        obj.setVisittime(DBUtil.getDate(rs, "VisitTime"));
        obj.setTotaltime(DBUtil.getInteger(rs, "TotalTime"));
        obj.setTransferredbytes(DBUtil.getInteger(rs, "TransferredBytes"));
        obj.setNumberofrequests(DBUtil.getInteger(rs, "NumberOfRequests"));
        obj.setUser(DBUtil.getString(rs, "User"));
        obj.setSiteapplicationid(DBUtil.getInteger(rs, "SiteApplicationID"));
        obj.setIpschool(DBUtil.getString(rs, "IPSchool"));

        return obj;
    }

    protected Connection getConn() {
        return (conn == null) ? DBUtil.getConnection() : conn;
    }
}
