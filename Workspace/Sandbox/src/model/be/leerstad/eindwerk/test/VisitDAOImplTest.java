// Generated by DB Solo 5.2.1 on Feb 14, 2017 at 9:31:39 PM
package be.leerstad.eindwerk.test;

import be.leerstad.eindwerk.Visit;
import be.leerstad.eindwerk.jdbc.VisitDAOImpl;

import junit.framework.TestCase;

import java.sql.Connection;

import java.util.Date;


public class VisitDAOImplTest extends TestCase {
    private Connection conn = null;

    protected void setUp() throws Exception {
        conn = TestUtil.getConnection();
    }

    protected void tearDown() throws Exception {
        TestUtil.closeConnection(conn);
        conn = null;
    }

    public void testSelect() {
        VisitDAOImpl obj = new VisitDAOImpl(getConn());

        try {
            obj.selectAll();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertTrue(false);
        }
    }

    public void testDelete() {
        try {
            VisitDAOImpl dao = new VisitDAOImpl(getConn());

            Visit obj = insert(getConn());
            int before = dao.selectAll().size();
            int after;

            dao.delete(obj);
            after = dao.selectAll().size();
            assertTrue(after == (before - 1));
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testFinders() {
        try {
            VisitDAOImpl dao = new VisitDAOImpl(getConn());
            Visit obj = insert(getConn());

            assertTrue(dao.getByLogfile(obj.getLogfile()).size() > 0);
            assertTrue(dao.getByIpaddress(obj.getIpaddress()).size() > 0);
            assertTrue(dao.getByVisittime(obj.getVisittime()).size() > 0);
            assertTrue(dao.getByTotaltime(obj.getTotaltime()).size() > 0);
            assertTrue(dao.getByTransferredbytes(obj.getTransferredbytes()).size() > 0);
            assertTrue(dao.getByNumberofrequests(obj.getNumberofrequests()).size() > 0);
            assertTrue(dao.getByUser(obj.getUser()).size() > 0);
            assertTrue(dao.getBySiteapplicationid(obj.getSiteapplicationid()).size() > 0);
            assertTrue(dao.getByIpschool(obj.getIpschool()).size() > 0);
            dao.delete(obj);

            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testInsert() {
        try {
            VisitDAOImpl dao = new VisitDAOImpl(getConn());

            int before = dao.selectAll().size();
            Visit obj = insert(getConn());
            int after = dao.selectAll().size();

            assertNotNull(obj);
            assertTrue(after == (before + 1));
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testUpdate() {
        try {
            // insert
            VisitDAOImpl dao = new VisitDAOImpl(getConn());
            Visit obj = insert(getConn());

            // update
            String templogfile = TestUtil.random_String();
            String tempipaddress = TestUtil.random_String();
            Date tempvisittime = TestUtil.random_Date();
            Integer temptotaltime = TestUtil.random_Integer();
            Integer temptransferredbytes = TestUtil.random_Integer();
            Integer tempnumberofrequests = TestUtil.random_Integer();
            String tempuser = TestUtil.random_String();
            String tempipschool = TestUtil.random_String();

            obj.setLogfile(templogfile);
            obj.setIpaddress(tempipaddress);
            obj.setVisittime(tempvisittime);
            obj.setTotaltime(temptotaltime);
            obj.setTransferredbytes(temptransferredbytes);
            obj.setNumberofrequests(tempnumberofrequests);
            obj.setUser(tempuser);
            obj.setIpschool(tempipschool);
            dao.update(obj);

            // verify results
            obj = dao.getByPrimaryKey(obj.getVisitid());

            assertEquals(templogfile, obj.getLogfile());
            assertEquals(tempipaddress, obj.getIpaddress());
            assertEquals(tempvisittime, obj.getVisittime());
            assertEquals(temptotaltime, obj.getTotaltime());
            assertEquals(temptransferredbytes, obj.getTransferredbytes());
            assertEquals(tempnumberofrequests, obj.getNumberofrequests());
            assertEquals(tempuser, obj.getUser());
            assertEquals(tempipschool, obj.getIpschool());
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    protected static Visit insert(Connection conn) throws Exception {
        Visit obj = new Visit();
        VisitDAOImpl dao = new VisitDAOImpl(conn);

        obj.setVisitid(TestUtil.random_String());
        obj.setLogfile(TestUtil.random_String());
        obj.setIpaddress(TestUtil.random_String());
        obj.setVisittime(TestUtil.random_Date());
        obj.setTotaltime(TestUtil.random_Integer());
        obj.setTransferredbytes(TestUtil.random_Integer());
        obj.setNumberofrequests(TestUtil.random_Integer());
        obj.setUser(TestUtil.random_String());
        obj.setSiteapplicationid(SiteapplicationDAOImplTest.insert(conn).getApplicationid());
        obj.setIpschool(TestUtil.random_String());

        dao.insert(obj);

        return obj;
    }

    private Connection getConn() {
        return conn;
    }
}
