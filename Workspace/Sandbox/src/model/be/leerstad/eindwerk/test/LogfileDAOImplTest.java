// Generated by DB Solo 5.2.1 on Feb 14, 2017 at 9:31:39 PM
package be.leerstad.eindwerk.test;

import be.leerstad.eindwerk.Logfile;
import be.leerstad.eindwerk.jdbc.LogfileDAOImpl;

import junit.framework.TestCase;

import java.sql.Connection;

import java.util.Date;


public class LogfileDAOImplTest extends TestCase {
    private Connection conn = null;

    protected void setUp() throws Exception {
        conn = TestUtil.getConnection();
    }

    protected void tearDown() throws Exception {
        TestUtil.closeConnection(conn);
        conn = null;
    }

    public void testSelect() {
        LogfileDAOImpl obj = new LogfileDAOImpl(getConn());

        try {
            obj.selectAll();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertTrue(false);
        }
    }

    public void testDelete() {
        try {
            LogfileDAOImpl dao = new LogfileDAOImpl(getConn());

            Logfile obj = insert(getConn());
            int before = dao.selectAll().size();
            int after;

            dao.delete(obj);
            after = dao.selectAll().size();
            assertTrue(after == (before - 1));
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testFinders() {
        try {
            LogfileDAOImpl dao = new LogfileDAOImpl(getConn());
            Logfile obj = insert(getConn());

            assertTrue(dao.getByLogfiledate(obj.getLogfiledate()).size() > 0);
            dao.delete(obj);

            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testInsert() {
        try {
            LogfileDAOImpl dao = new LogfileDAOImpl(getConn());

            int before = dao.selectAll().size();
            Logfile obj = insert(getConn());
            int after = dao.selectAll().size();

            assertNotNull(obj);
            assertTrue(after == (before + 1));
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testUpdate() {
        try {
            // insert
            LogfileDAOImpl dao = new LogfileDAOImpl(getConn());
            Logfile obj = insert(getConn());

            // update
            Date templogfiledate = TestUtil.random_Date();

            obj.setLogfiledate(templogfiledate);
            dao.update(obj);

            // verify results
            obj = dao.getByPrimaryKey(obj.getLogfile());

            assertEquals(templogfiledate, obj.getLogfiledate());
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    protected static Logfile insert(Connection conn) throws Exception {
        Logfile obj = new Logfile();
        LogfileDAOImpl dao = new LogfileDAOImpl(conn);

        obj.setLogfile(TestUtil.random_String());
        obj.setLogfiledate(TestUtil.random_Date());

        dao.insert(obj);

        return obj;
    }

    private Connection getConn() {
        return conn;
    }
}
