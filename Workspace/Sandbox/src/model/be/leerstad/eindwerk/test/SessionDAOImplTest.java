// Generated by DB Solo 5.2.1 on Feb 14, 2017 at 9:31:39 PM
package be.leerstad.eindwerk.test;

import be.leerstad.eindwerk.Session;
import be.leerstad.eindwerk.jdbc.SessionDAOImpl;

import junit.framework.TestCase;

import java.sql.Connection;

import java.util.Date;


public class SessionDAOImplTest extends TestCase {
    private Connection conn = null;

    protected void setUp() throws Exception {
        conn = TestUtil.getConnection();
    }

    protected void tearDown() throws Exception {
        TestUtil.closeConnection(conn);
        conn = null;
    }

    public void testSelect() {
        SessionDAOImpl obj = new SessionDAOImpl(getConn());

        try {
            obj.selectAll();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertTrue(false);
        }
    }

    public void testDelete() {
        try {
            SessionDAOImpl dao = new SessionDAOImpl(getConn());

            Session obj = insert(getConn());
            int before = dao.selectAll().size();
            int after;

            dao.delete(obj);
            after = dao.selectAll().size();
            assertTrue(after == (before - 1));
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testFinders() {
        try {
            SessionDAOImpl dao = new SessionDAOImpl(getConn());
            Session obj = insert(getConn());

            assertTrue(dao.getByLogfile(obj.getLogfile()).size() > 0);
            assertTrue(dao.getByIpaddress(obj.getIpaddress()).size() > 0);
            assertTrue(dao.getBySessiontime(obj.getSessiontime()).size() > 0);
            assertTrue(dao.getByTotaltime(obj.getTotaltime()).size() > 0);
            assertTrue(dao.getByTransferredbytes(obj.getTransferredbytes()).size() > 0);
            assertTrue(dao.getByNumberofrequests(obj.getNumberofrequests()).size() > 0);
            assertTrue(dao.getByUserid(obj.getUserid()).size() > 0);
            assertTrue(dao.getBySiteid(obj.getSiteid()).size() > 0);
            dao.delete(obj);

            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testInsert() {
        try {
            SessionDAOImpl dao = new SessionDAOImpl(getConn());

            int before = dao.selectAll().size();
            Session obj = insert(getConn());
            int after = dao.selectAll().size();

            assertNotNull(obj);
            assertTrue(after == (before + 1));
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testUpdate() {
        try {
            // insert
            SessionDAOImpl dao = new SessionDAOImpl(getConn());
            Session obj = insert(getConn());

            // update
            String templogfile = TestUtil.random_String();
            String tempipaddress = TestUtil.random_String();
            Date tempsessiontime = TestUtil.random_Date();
            Integer temptotaltime = TestUtil.random_Integer();
            Integer temptransferredbytes = TestUtil.random_Integer();
            Integer tempnumberofrequests = TestUtil.random_Integer();

            obj.setLogfile(templogfile);
            obj.setIpaddress(tempipaddress);
            obj.setSessiontime(tempsessiontime);
            obj.setTotaltime(temptotaltime);
            obj.setTransferredbytes(temptransferredbytes);
            obj.setNumberofrequests(tempnumberofrequests);
            dao.update(obj);

            // verify results
            obj = dao.getByPrimaryKey(obj.getSessionid());

            assertEquals(templogfile, obj.getLogfile());
            assertEquals(tempipaddress, obj.getIpaddress());
            assertEquals(tempsessiontime, obj.getSessiontime());
            assertEquals(temptotaltime, obj.getTotaltime());
            assertEquals(temptransferredbytes, obj.getTransferredbytes());
            assertEquals(tempnumberofrequests, obj.getNumberofrequests());
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    protected static Session insert(Connection conn) throws Exception {
        Session obj = new Session();
        SessionDAOImpl dao = new SessionDAOImpl(conn);

        obj.setSessionid(TestUtil.random_String());
        obj.setLogfile(TestUtil.random_String());
        obj.setIpaddress(TestUtil.random_String());
        obj.setSessiontime(TestUtil.random_Date());
        obj.setTotaltime(TestUtil.random_Integer());
        obj.setTransferredbytes(TestUtil.random_Integer());
        obj.setNumberofrequests(TestUtil.random_Integer());
        obj.setUserid(UserDAOImplTest.insert(conn).getUserid());
        obj.setSiteid(SiteDAOImplTest.insert(conn).getSiteid());

        dao.insert(obj);

        return obj;
    }

    private Connection getConn() {
        return conn;
    }
}
