// Generated by DB Solo 5.2.1 on Feb 14, 2017 at 9:31:39 PM
package be.leerstad.eindwerk.test;

import be.leerstad.eindwerk.Siteapplication;
import be.leerstad.eindwerk.jdbc.SiteapplicationDAOImpl;

import junit.framework.TestCase;

import java.sql.Connection;


public class SiteapplicationDAOImplTest extends TestCase {
    private Connection conn = null;

    protected void setUp() throws Exception {
        conn = TestUtil.getConnection();
    }

    protected void tearDown() throws Exception {
        TestUtil.closeConnection(conn);
        conn = null;
    }

    public void testSelect() {
        SiteapplicationDAOImpl obj = new SiteapplicationDAOImpl(getConn());

        try {
            obj.selectAll();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertTrue(false);
        }
    }

    public void testDelete() {
        try {
            SiteapplicationDAOImpl dao = new SiteapplicationDAOImpl(getConn());

            Siteapplication obj = insert(getConn());
            int before = dao.selectAll().size();
            int after;

            dao.delete(obj);
            after = dao.selectAll().size();
            assertTrue(after == (before - 1));
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testFinders() {
        try {
            SiteapplicationDAOImpl dao = new SiteapplicationDAOImpl(getConn());
            Siteapplication obj = insert(getConn());

            assertTrue(dao.getByApplication(obj.getApplication()).size() > 0);
            dao.delete(obj);

            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testInsert() {
        try {
            SiteapplicationDAOImpl dao = new SiteapplicationDAOImpl(getConn());

            int before = dao.selectAll().size();
            Siteapplication obj = insert(getConn());
            int after = dao.selectAll().size();

            assertNotNull(obj);
            assertTrue(after == (before + 1));
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    public void testUpdate() {
        try {
            // insert
            SiteapplicationDAOImpl dao = new SiteapplicationDAOImpl(getConn());
            Siteapplication obj = insert(getConn());

            // update
            String tempapplication = TestUtil.random_String();

            obj.setApplication(tempapplication);
            dao.update(obj);

            // verify results
            obj = dao.getByPrimaryKey(obj.getApplicationid());

            assertEquals(tempapplication, obj.getApplication());
            getConn().commit();
        }
        catch (Exception e) {
            e.printStackTrace();
            assertFalse(true);
        }
    }

    protected static Siteapplication insert(Connection conn)
        throws Exception {
        Siteapplication obj = new Siteapplication();
        SiteapplicationDAOImpl dao = new SiteapplicationDAOImpl(conn);

        obj.setApplicationid(TestUtil.random_int());
        obj.setApplication(TestUtil.random_String());

        dao.insert(obj);

        return obj;
    }

    private Connection getConn() {
        return conn;
    }
}
